"use client"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import { MessageCircle, X, Send, Bot, User, Phone, Clock, Minimize2 } from "lucide-react"

interface Message {
  id: number
  text: string
  sender: "user" | "bot"
  timestamp: Date
}

const initialMessages: Message[] = [
  {
    id: 1,
    text: "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa Paradise Resort. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c d·ªãch v·ª•, ƒë·∫∑t ph√≤ng, ho·∫∑c tr·∫£ l·ªùi b·∫•t k·ª≥ c√¢u h·ªèi n√†o v·ªÅ khu ngh·ªâ d∆∞·ª°ng. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay?",
    sender: "bot",
    timestamp: new Date(),
  },
]

const quickReplies = ["Gi√° ph√≤ng nh∆∞ th·∫ø n√†o?", "C√≥ nh·ªØng d·ªãch v·ª• g√¨?", "C√°ch ƒë·∫∑t ph√≤ng?", "Li√™n h·ªá tr·ª±c ti·∫øp"]

export default function ChatBot() {
  const [isOpen, setIsOpen] = useState(false)
  const [isMinimized, setIsMinimized] = useState(false)
  const [messages, setMessages] = useState<Message[]>(initialMessages)
  const [inputValue, setInputValue] = useState("")
  const [isTyping, setIsTyping] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const inputRef = useRef<HTMLInputElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  useEffect(() => {
    if (isOpen && !isMinimized && inputRef.current) {
      inputRef.current.focus()
    }
  }, [isOpen, isMinimized])

  const handleSendMessage = (text: string) => {
    if (!text.trim()) return

    const userMessage: Message = {
      id: Date.now(),
      text: text.trim(),
      sender: "user",
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    setInputValue("")
    setIsTyping(true)

    // Simulate bot response
    setTimeout(() => {
      const botResponse = getBotResponse(text.trim())
      const botMessage: Message = {
        id: Date.now() + 1,
        text: botResponse,
        sender: "bot",
        timestamp: new Date(),
      }
      setMessages((prev) => [...prev, botMessage])
      setIsTyping(false)
    }, 1500)
  }

  const getBotResponse = (userText: string): string => {
    const text = userText.toLowerCase()

    if (text.includes("gi√°") || text.includes("ph√≤ng")) {
      return "Gi√° ph√≤ng t·∫°i Paradise Resort t·ª´ 2.500.000 VNƒê/ƒë√™m t√πy theo lo·∫°i ph√≤ng v√† th·ªùi gian. Ch√∫ng t√¥i c√≥ nhi·ªÅu g√≥i ∆∞u ƒë√£i h·∫•p d·∫´n:\n\n‚Ä¢ Deluxe Room: 2.500.000 - 3.500.000 VNƒê\n‚Ä¢ Ocean View Suite: 4.500.000 - 6.000.000 VNƒê\n‚Ä¢ Presidential Villa: 8.000.000 - 12.000.000 VNƒê\n\nB·∫°n mu·ªën t√¥i t∆∞ v·∫•n th√™m v·ªÅ lo·∫°i ph√≤ng n√†o kh√¥ng?"
    }

    if (text.includes("d·ªãch v·ª•") || text.includes("ti·ªán √≠ch")) {
      return "Paradise Resort cung c·∫•p ƒë·∫ßy ƒë·ªß c√°c d·ªãch v·ª• cao c·∫•p:\n\nüèñÔ∏è B√£i bi·ªÉn ri√™ng & th·ªÉ thao n∆∞·ªõc\nüçΩÔ∏è 3 nh√† h√†ng & 2 qu·∫ßy bar\nüíÜ‚Äç‚ôÄÔ∏è Spa & massage th∆∞ gi√£n\nüèä‚Äç‚ôÇÔ∏è H·ªì b∆°i v√¥ c·ª±c\nüéæ S√¢n tennis & golf mini\nüë∂ Khu vui ch∆°i tr·∫ª em\nüöó ƒê∆∞a ƒë√≥n s√¢n bay mi·ªÖn ph√≠\n\nB·∫°n quan t√¢m ƒë·∫øn d·ªãch v·ª• n√†o ƒë·∫∑c bi·ªát?"
    }

    if (text.includes("ƒë·∫∑t") || text.includes("booking")) {
      return "ƒê·ªÉ ƒë·∫∑t ph√≤ng t·∫°i Paradise Resort, b·∫°n c√≥ th·ªÉ:\n\nüìû G·ªçi hotline: 1900-1234\nüíª ƒê·∫∑t online t·∫°i website\nüìß Email: booking@paradiseresort.com\nüè® ƒê·∫øn tr·ª±c ti·∫øp t·∫°i resort\n\nƒê·∫∑t tr∆∞·ªõc 30 ng√†y ƒë∆∞·ª£c gi·∫£m 20%! B·∫°n mu·ªën t√¥i h·ªó tr·ª£ ƒë·∫∑t ph√≤ng ngay kh√¥ng?"
    }

    if (text.includes("li√™n h·ªá") || text.includes("hotline")) {
      return "Th√¥ng tin li√™n h·ªá Paradise Resort:\n\nüìû Hotline: 1900-1234 (24/7)\nüìß Email: info@paradiseresort.com\nüìç ƒê·ªãa ch·ªâ: 123 Paradise Beach, Nha Trang\nüïê Gi·ªù l√†m vi·ªác: 24/7\n\nNh√¢n vi√™n t∆∞ v·∫•n s·∫Ω h·ªó tr·ª£ b·∫°n ngay l·∫≠p t·ª©c!"
    }

    return "C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! T√¥i ƒë√£ ghi nh·∫≠n y√™u c·∫ßu c·ªßa b·∫°n. ƒê·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt h∆°n, vui l√≤ng li√™n h·ªá hotline 1900-1234 ho·∫∑c ƒë·ªÉ l·∫°i th√¥ng tin, nh√¢n vi√™n s·∫Ω g·ªçi l·∫°i trong 15 ph√∫t. B·∫°n c√≤n c√¢u h·ªèi g√¨ kh√°c kh√¥ng?"
  }

  const handleQuickReply = (reply: string) => {
    handleSendMessage(reply)
  }

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString("vi-VN", {
      hour: "2-digit",
      minute: "2-digit",
    })
  }

  return (
    <>
      {/* Chat Button */}
      {!isOpen && (
        <Button
          onClick={() => setIsOpen(true)}
          className="fixed bottom-6 right-6 z-50 h-14 w-14 rounded-full bg-gradient-to-r from-sky-500 to-blue-600 shadow-2xl hover:from-sky-600 hover:to-blue-700 hover:scale-110 transition-all duration-300 group"
          size="icon"
        >
          <MessageCircle className="h-6 w-6 text-white group-hover:scale-110 transition-transform" />
          <div className="absolute -top-2 -right-2 h-4 w-4 bg-red-500 rounded-full animate-pulse" />
        </Button>
      )}

      {/* Chat Window */}
      {isOpen && (
        <div className="fixed bottom-6 right-6 z-50 w-80 sm:w-96 bg-white rounded-2xl shadow-2xl border border-gray-200 overflow-hidden">
          {/* Header */}
          <div className="bg-gradient-to-r from-sky-500 to-blue-600 p-4 text-white">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <Avatar className="h-10 w-10 border-2 border-white/30">
                  <AvatarImage src="/placeholder.svg?height=40&width=40" />
                  <AvatarFallback className="bg-white/20 text-white">
                    <Bot className="h-5 w-5" />
                  </AvatarFallback>
                </Avatar>
                <div>
                  <h3 className="font-semibold">Paradise Assistant</h3>
                  <div className="flex items-center gap-1 text-xs opacity-90">
                    <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse" />
                    <span>ƒêang online</span>
                  </div>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8 text-white hover:bg-white/20"
                  onClick={() => setIsMinimized(!isMinimized)}
                >
                  <Minimize2 className="h-4 w-4" />
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8 text-white hover:bg-white/20"
                  onClick={() => setIsOpen(false)}
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </div>

          {/* Chat Content */}
          {!isMinimized && (
            <>
              {/* Messages */}
              <div className="h-80 overflow-y-auto p-4 space-y-4 bg-gray-50">
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex gap-3 ${message.sender === "user" ? "justify-end" : "justify-start"}`}
                  >
                    {message.sender === "bot" && (
                      <Avatar className="h-8 w-8 flex-shrink-0">
                        <AvatarFallback className="bg-sky-100 text-sky-600">
                          <Bot className="h-4 w-4" />
                        </AvatarFallback>
                      </Avatar>
                    )}
                    <div
                      className={`max-w-[75%] rounded-2xl px-4 py-2 ${
                        message.sender === "user" ? "bg-sky-500 text-white" : "bg-white border shadow-sm"
                      }`}
                    >
                      <p className="text-sm whitespace-pre-line">{message.text}</p>
                      <p className={`text-xs mt-1 ${message.sender === "user" ? "text-sky-100" : "text-gray-500"}`}>
                        {formatTime(message.timestamp)}
                      </p>
                    </div>
                    {message.sender === "user" && (
                      <Avatar className="h-8 w-8 flex-shrink-0">
                        <AvatarFallback className="bg-gray-100">
                          <User className="h-4 w-4" />
                        </AvatarFallback>
                      </Avatar>
                    )}
                  </div>
                ))}

                {/* Typing Indicator */}
                {isTyping && (
                  <div className="flex gap-3 justify-start">
                    <Avatar className="h-8 w-8">
                      <AvatarFallback className="bg-sky-100 text-sky-600">
                        <Bot className="h-4 w-4" />
                      </AvatarFallback>
                    </Avatar>
                    <div className="bg-white border rounded-2xl px-4 py-2 shadow-sm">
                      <div className="flex gap-1">
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" />
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce delay-100" />
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce delay-200" />
                      </div>
                    </div>
                  </div>
                )}

                <div ref={messagesEndRef} />
              </div>

              {/* Quick Replies */}
              <div className="p-3 border-t bg-white">
                <div className="flex flex-wrap gap-2 mb-3">
                  {quickReplies.map((reply, index) => (
                    <Button
                      key={index}
                      variant="outline"
                      size="sm"
                      className="text-xs rounded-full hover:bg-sky-50 hover:border-sky-300 bg-transparent"
                      onClick={() => handleQuickReply(reply)}
                    >
                      {reply}
                    </Button>
                  ))}
                </div>
              </div>

              {/* Input */}
              <div className="p-4 border-t bg-white">
                <div className="flex gap-2">
                  <Input
                    ref={inputRef}
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    placeholder="Nh·∫≠p tin nh·∫Øn..."
                    className="flex-1 rounded-full border-gray-300 focus:border-sky-500"
                    onKeyPress={(e) => {
                      if (e.key === "Enter") {
                        handleSendMessage(inputValue)
                      }
                    }}
                  />
                  <Button
                    onClick={() => handleSendMessage(inputValue)}
                    className="rounded-full bg-sky-500 hover:bg-sky-600 px-4"
                    disabled={!inputValue.trim() || isTyping}
                  >
                    <Send className="h-4 w-4" />
                  </Button>
                </div>
                <div className="flex items-center justify-center gap-4 mt-3 text-xs text-gray-500">
                  <div className="flex items-center gap-1">
                    <Phone className="h-3 w-3" />
                    <span>1900-1234</span>
                  </div>
                  <div className="flex items-center gap-1">
                    <Clock className="h-3 w-3" />
                    <span>24/7</span>
                  </div>
                </div>
              </div>
            </>
          )}

          {/* Minimized State */}
          {isMinimized && (
            <div className="p-4 bg-white">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse" />
                  <span className="text-sm text-gray-600">Chat ƒëang ƒë∆∞·ª£c thu g·ªçn</span>
                </div>
                <Badge variant="secondary" className="text-xs">
                  {messages.length - 1} tin nh·∫Øn
                </Badge>
              </div>
            </div>
          )}
        </div>
      )}
    </>
  )
}
